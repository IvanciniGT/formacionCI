pipeline {
    
    // Donde se ejecuta el programa (el entorno)
    //agent any // En cualquier lao'
    agent {
        docker {
            image "maven:3.8.5-openjdk-18"
        }
    }
    triggers {
      pollSCM '* * * * *'
    }
    parameters {
      booleanParam defaultValue: true, description: 'Quieres hacer las pruebas con Selenium?', name: 'TEST_UI'
    }
    stages {
        stage('Compilación') {
            steps {
                //echo 'Compilo'
                sh 'mvn -f proyectos/proyecto/pom.xml compile'
            }
        }
        stage('Compilar las pruebas') {
            steps {
                sh 'mvn -f proyectos/proyecto/pom.xml test-compile'
            }
        }
        stage('Ejecutar las pruebas unitarias') {
            steps {
                sh 'mvn -f proyectos/proyecto/pom.xml test'
                sh 'mvn -f proyectos/proyecto/pom.xml verify' // Informe jacoco
            }
            // Cualquier etapa (stage) del pipeline puede tener asociadas unas post-tareas
            // Solo si ha ido bien
            // Si ha ido mal
            // Siempre
            post {
                always {
                    junit stdioRetention: '', testResults: 'proyectos/proyecto/target/surefire-reports/*.xml'
                }
            }
        }
        stage('Ejecutar las pruebas estáticas') {
            steps {
                // INTEGRAR JENKINS CON SONAR
                // En jenkins hemos configurado el sonar
                withSonarQubeEnv('misonar'){ // Me ofrece las variables de entorno con el token y la url
                    // La petición se hace de forma asíncrona
                    sh 'mvn -f proyectos/proyecto/pom.xml sonar:sonar'
                }
                // Cuando sea que sonar acabe el análisis, SONAR DEBERA COMUNICAR EL RESULTADO A JENKINS
                // Necesitamos integrar SONAR CON JENKINS
                // Necesitamos configurar en sonar el jenkins
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Ejecutar las pruebas del frontal (HTML)') {
            steps {
                echo 'Necesito selenium... navegadores.. los configuraré'
                echo 'Necesito un servidor de aplicaciones java, donde instalar mi app'
                echo 'Ejecutaré las pruebas'
            }
            when {
                expression {
                    return params.TEST_UI;
                }
            }
        }        
        stage('Distribuirlo') {
            steps {
                echo 'Lo distribuyo'
            }
        }        
    }
    
}